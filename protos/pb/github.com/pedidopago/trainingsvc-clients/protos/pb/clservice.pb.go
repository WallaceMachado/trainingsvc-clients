// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clservice.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NewClientRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Birthday int64  `protobuf:"varint,2,opt,name=birthday" json:"birthday,omitempty"`
	Score    int64  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (m *NewClientRequest) Reset()                    { *m = NewClientRequest{} }
func (m *NewClientRequest) String() string            { return proto.CompactTextString(m) }
func (*NewClientRequest) ProtoMessage()               {}
func (*NewClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *NewClientRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewClientRequest) GetBirthday() int64 {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *NewClientRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type NewClientResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *NewClientResponse) Reset()                    { *m = NewClientResponse{} }
func (m *NewClientResponse) String() string            { return proto.CompactTextString(m) }
func (*NewClientResponse) ProtoMessage()               {}
func (*NewClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *NewClientResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryClientsRequest struct {
	Id       *OptString `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     *OptString `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Birthday *Int64Comp `protobuf:"bytes,3,opt,name=birthday" json:"birthday,omitempty"`
	Score    *Int64Comp `protobuf:"bytes,4,opt,name=score" json:"score,omitempty"`
}

func (m *QueryClientsRequest) Reset()                    { *m = QueryClientsRequest{} }
func (m *QueryClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryClientsRequest) ProtoMessage()               {}
func (*QueryClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *QueryClientsRequest) GetId() *OptString {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *QueryClientsRequest) GetName() *OptString {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *QueryClientsRequest) GetBirthday() *Int64Comp {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *QueryClientsRequest) GetScore() *Int64Comp {
	if m != nil {
		return m.Score
	}
	return nil
}

type QueryClientsResponse struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *QueryClientsResponse) Reset()                    { *m = QueryClientsResponse{} }
func (m *QueryClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryClientsResponse) ProtoMessage()               {}
func (*QueryClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *QueryClientsResponse) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetClientsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *GetClientsRequest) Reset()                    { *m = GetClientsRequest{} }
func (m *GetClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetClientsRequest) ProtoMessage()               {}
func (*GetClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetClientsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetClientsResponse struct {
	Clients []*Client `protobuf:"bytes,1,rep,name=clients" json:"clients,omitempty"`
}

func (m *GetClientsResponse) Reset()                    { *m = GetClientsResponse{} }
func (m *GetClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetClientsResponse) ProtoMessage()               {}
func (*GetClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetClientsResponse) GetClients() []*Client {
	if m != nil {
		return m.Clients
	}
	return nil
}

type DeleteClientRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteClientRequest) Reset()                    { *m = DeleteClientRequest{} }
func (m *DeleteClientRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteClientRequest) ProtoMessage()               {}
func (*DeleteClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *DeleteClientRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteClientResponse struct {
}

func (m *DeleteClientResponse) Reset()                    { *m = DeleteClientResponse{} }
func (m *DeleteClientResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteClientResponse) ProtoMessage()               {}
func (*DeleteClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type DeleteAllClientsRequest struct {
}

func (m *DeleteAllClientsRequest) Reset()                    { *m = DeleteAllClientsRequest{} }
func (m *DeleteAllClientsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAllClientsRequest) ProtoMessage()               {}
func (*DeleteAllClientsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

type DeleteAllClientsResponse struct {
}

func (m *DeleteAllClientsResponse) Reset()                    { *m = DeleteAllClientsResponse{} }
func (m *DeleteAllClientsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAllClientsResponse) ProtoMessage()               {}
func (*DeleteAllClientsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type NewMatchRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Score    int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (m *NewMatchRequest) Reset()                    { *m = NewMatchRequest{} }
func (m *NewMatchRequest) String() string            { return proto.CompactTextString(m) }
func (*NewMatchRequest) ProtoMessage()               {}
func (*NewMatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *NewMatchRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *NewMatchRequest) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type NewMatchResponse struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NewMatchResponse) Reset()                    { *m = NewMatchResponse{} }
func (m *NewMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*NewMatchResponse) ProtoMessage()               {}
func (*NewMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *NewMatchResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SortRequest struct {
	Items            []string `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	RemoveDuplicates bool     `protobuf:"varint,2,opt,name=remove_duplicates,json=removeDuplicates" json:"remove_duplicates,omitempty"`
}

func (m *SortRequest) Reset()                    { *m = SortRequest{} }
func (m *SortRequest) String() string            { return proto.CompactTextString(m) }
func (*SortRequest) ProtoMessage()               {}
func (*SortRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *SortRequest) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SortRequest) GetRemoveDuplicates() bool {
	if m != nil {
		return m.RemoveDuplicates
	}
	return false
}

type SortResponse struct {
	Items []string `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *SortResponse) Reset()                    { *m = SortResponse{} }
func (m *SortResponse) String() string            { return proto.CompactTextString(m) }
func (*SortResponse) ProtoMessage()               {}
func (*SortResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *SortResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*NewClientRequest)(nil), "pb.NewClientRequest")
	proto.RegisterType((*NewClientResponse)(nil), "pb.NewClientResponse")
	proto.RegisterType((*QueryClientsRequest)(nil), "pb.QueryClientsRequest")
	proto.RegisterType((*QueryClientsResponse)(nil), "pb.QueryClientsResponse")
	proto.RegisterType((*GetClientsRequest)(nil), "pb.GetClientsRequest")
	proto.RegisterType((*GetClientsResponse)(nil), "pb.GetClientsResponse")
	proto.RegisterType((*DeleteClientRequest)(nil), "pb.DeleteClientRequest")
	proto.RegisterType((*DeleteClientResponse)(nil), "pb.DeleteClientResponse")
	proto.RegisterType((*DeleteAllClientsRequest)(nil), "pb.DeleteAllClientsRequest")
	proto.RegisterType((*DeleteAllClientsResponse)(nil), "pb.DeleteAllClientsResponse")
	proto.RegisterType((*NewMatchRequest)(nil), "pb.NewMatchRequest")
	proto.RegisterType((*NewMatchResponse)(nil), "pb.NewMatchResponse")
	proto.RegisterType((*SortRequest)(nil), "pb.SortRequest")
	proto.RegisterType((*SortResponse)(nil), "pb.SortResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientsService service

type ClientsServiceClient interface {
	NewClient(ctx context.Context, in *NewClientRequest, opts ...grpc.CallOption) (*NewClientResponse, error)
	QueryClients(ctx context.Context, in *QueryClientsRequest, opts ...grpc.CallOption) (*QueryClientsResponse, error)
	GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error)
	DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error)
	DeleteAllClients(ctx context.Context, in *DeleteAllClientsRequest, opts ...grpc.CallOption) (*DeleteAllClientsResponse, error)
	NewMatch(ctx context.Context, in *NewMatchRequest, opts ...grpc.CallOption) (*NewMatchResponse, error)
	Sort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error)
}

type clientsServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientsServiceClient(cc *grpc.ClientConn) ClientsServiceClient {
	return &clientsServiceClient{cc}
}

func (c *clientsServiceClient) NewClient(ctx context.Context, in *NewClientRequest, opts ...grpc.CallOption) (*NewClientResponse, error) {
	out := new(NewClientResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/NewClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) QueryClients(ctx context.Context, in *QueryClientsRequest, opts ...grpc.CallOption) (*QueryClientsResponse, error) {
	out := new(QueryClientsResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/QueryClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) GetClients(ctx context.Context, in *GetClientsRequest, opts ...grpc.CallOption) (*GetClientsResponse, error) {
	out := new(GetClientsResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/GetClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DeleteClient(ctx context.Context, in *DeleteClientRequest, opts ...grpc.CallOption) (*DeleteClientResponse, error) {
	out := new(DeleteClientResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/DeleteClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) DeleteAllClients(ctx context.Context, in *DeleteAllClientsRequest, opts ...grpc.CallOption) (*DeleteAllClientsResponse, error) {
	out := new(DeleteAllClientsResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/DeleteAllClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) NewMatch(ctx context.Context, in *NewMatchRequest, opts ...grpc.CallOption) (*NewMatchResponse, error) {
	out := new(NewMatchResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/NewMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientsServiceClient) Sort(ctx context.Context, in *SortRequest, opts ...grpc.CallOption) (*SortResponse, error) {
	out := new(SortResponse)
	err := grpc.Invoke(ctx, "/pb.ClientsService/Sort", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientsService service

type ClientsServiceServer interface {
	NewClient(context.Context, *NewClientRequest) (*NewClientResponse, error)
	QueryClients(context.Context, *QueryClientsRequest) (*QueryClientsResponse, error)
	GetClients(context.Context, *GetClientsRequest) (*GetClientsResponse, error)
	DeleteClient(context.Context, *DeleteClientRequest) (*DeleteClientResponse, error)
	DeleteAllClients(context.Context, *DeleteAllClientsRequest) (*DeleteAllClientsResponse, error)
	NewMatch(context.Context, *NewMatchRequest) (*NewMatchResponse, error)
	Sort(context.Context, *SortRequest) (*SortResponse, error)
}

func RegisterClientsServiceServer(s *grpc.Server, srv ClientsServiceServer) {
	s.RegisterService(&_ClientsService_serviceDesc, srv)
}

func _ClientsService_NewClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).NewClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/NewClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).NewClient(ctx, req.(*NewClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_QueryClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).QueryClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/QueryClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).QueryClients(ctx, req.(*QueryClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_GetClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).GetClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/GetClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).GetClients(ctx, req.(*GetClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).DeleteClient(ctx, req.(*DeleteClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_DeleteAllClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).DeleteAllClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/DeleteAllClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).DeleteAllClients(ctx, req.(*DeleteAllClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_NewMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).NewMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/NewMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).NewMatch(ctx, req.(*NewMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientsService_Sort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientsServiceServer).Sort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ClientsService/Sort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientsServiceServer).Sort(ctx, req.(*SortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ClientsService",
	HandlerType: (*ClientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewClient",
			Handler:    _ClientsService_NewClient_Handler,
		},
		{
			MethodName: "QueryClients",
			Handler:    _ClientsService_QueryClients_Handler,
		},
		{
			MethodName: "GetClients",
			Handler:    _ClientsService_GetClients_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _ClientsService_DeleteClient_Handler,
		},
		{
			MethodName: "DeleteAllClients",
			Handler:    _ClientsService_DeleteAllClients_Handler,
		},
		{
			MethodName: "NewMatch",
			Handler:    _ClientsService_NewMatch_Handler,
		},
		{
			MethodName: "Sort",
			Handler:    _ClientsService_Sort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clservice.proto",
}

func init() { proto.RegisterFile("clservice.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x2d, 0x09, 0xdd, 0xe0, 0xd2, 0x16, 0x30, 0x59, 0x9b, 0xa5, 0x9b, 0xc4, 0xd2, 0x56, 0x62,
	0xaa, 0x06, 0x12, 0xdd, 0x87, 0x54, 0x69, 0x0f, 0x1b, 0x48, 0x53, 0x1f, 0xd6, 0x6e, 0xf0, 0x32,
	0xed, 0xa5, 0xca, 0xc7, 0x15, 0x58, 0x0a, 0x49, 0x16, 0x1b, 0x2a, 0x7e, 0xd1, 0xfe, 0xcc, 0x7e,
	0xd4, 0x94, 0xd8, 0x09, 0x21, 0xc9, 0x9b, 0x7d, 0xee, 0xf1, 0xbd, 0xe7, 0x5e, 0x1f, 0x1b, 0xda,
	0x8e, 0xc7, 0x30, 0xda, 0x50, 0x07, 0x87, 0x61, 0x14, 0xf0, 0x80, 0x28, 0xa1, 0x6d, 0x1c, 0x3b,
	0x1e, 0xdf, 0x86, 0xc8, 0x04, 0x64, 0xfe, 0x82, 0xce, 0x3d, 0x3e, 0x4d, 0x3c, 0x8a, 0x3e, 0x9f,
	0xe1, 0x9f, 0x35, 0x32, 0x4e, 0x08, 0xd4, 0x7d, 0x6b, 0x85, 0x7a, 0xad, 0x5f, 0x1b, 0x34, 0x67,
	0xc9, 0x9a, 0x18, 0xd0, 0xb0, 0x69, 0xc4, 0x97, 0xae, 0xb5, 0xd5, 0x95, 0x7e, 0x6d, 0xa0, 0xce,
	0xb2, 0x3d, 0xd1, 0xe0, 0x90, 0x39, 0x41, 0x84, 0xba, 0x9a, 0x04, 0xc4, 0xc6, 0xbc, 0x80, 0x6e,
	0x2e, 0x33, 0x0b, 0x03, 0x9f, 0x21, 0x39, 0x01, 0x85, 0xba, 0x32, 0xb1, 0x42, 0x5d, 0xf3, 0x6f,
	0x0d, 0x7a, 0x3f, 0xd7, 0x18, 0x6d, 0x05, 0x8f, 0xa5, 0x12, 0x5e, 0x67, 0xbc, 0xd6, 0xf8, 0x78,
	0x18, 0xda, 0xc3, 0x87, 0x90, 0xcf, 0x79, 0x44, 0xfd, 0x45, 0x7c, 0x8c, 0xbc, 0x91, 0x0a, 0x95,
	0x2a, 0x82, 0x10, 0xfc, 0x36, 0x27, 0x58, 0xdd, 0xd1, 0xee, 0x7c, 0xfe, 0xf1, 0xfd, 0x24, 0x58,
	0x85, 0x39, 0xfd, 0x17, 0xa9, 0xfe, 0x7a, 0x15, 0x4f, 0xb6, 0x33, 0x00, 0x6d, 0x5f, 0xa8, 0xec,
	0xa8, 0x03, 0x2a, 0x75, 0x99, 0x5e, 0xeb, 0xab, 0x83, 0xe6, 0x2c, 0x5e, 0x9a, 0x57, 0xd0, 0xfd,
	0x86, 0xbc, 0xd0, 0x50, 0x99, 0x76, 0x0b, 0x24, 0x4f, 0x93, 0xe9, 0x2e, 0xe1, 0xb9, 0x23, 0xa0,
	0x84, 0xdb, 0x1a, 0x43, 0xac, 0x46, 0x4e, 0x31, 0x0d, 0x99, 0x57, 0xd0, 0x9b, 0xa2, 0x87, 0x1c,
	0xf7, 0x2f, 0xae, 0x38, 0xdd, 0x53, 0xd0, 0xf6, 0x69, 0xa2, 0x88, 0xf9, 0x12, 0xce, 0x04, 0xfe,
	0xc5, 0xf3, 0xf6, 0x75, 0x9a, 0x06, 0xe8, 0xe5, 0x90, 0x3c, 0x36, 0x85, 0xf6, 0x3d, 0x3e, 0x7d,
	0xb7, 0xb8, 0xb3, 0x4c, 0x2b, 0x9e, 0x43, 0x53, 0x68, 0x7a, 0xcc, 0x0a, 0x37, 0x04, 0x70, 0xe7,
	0xee, 0x7c, 0xa1, 0xe4, 0x7d, 0x61, 0x26, 0x8e, 0x93, 0x59, 0x4a, 0xb6, 0x50, 0x13, 0xe1, 0x3f,
	0xa0, 0x35, 0x0f, 0xa2, 0xac, 0x2f, 0x0d, 0x0e, 0x29, 0xc7, 0x55, 0x3a, 0x3e, 0xb1, 0x21, 0xd7,
	0xd0, 0x8d, 0x70, 0x15, 0x6c, 0xf0, 0xd1, 0x5d, 0x87, 0x1e, 0x75, 0x2c, 0x8e, 0x2c, 0x29, 0xd5,
	0x98, 0x75, 0x44, 0x60, 0x9a, 0xe1, 0xe6, 0x25, 0x1c, 0x89, 0x8c, 0xb2, 0x62, 0x65, 0xca, 0xf1,
	0x3f, 0x15, 0x4e, 0x64, 0xd7, 0x73, 0xf1, 0x72, 0xc8, 0x2d, 0x34, 0x33, 0x1b, 0x13, 0x2d, 0xbe,
	0x8c, 0xe2, 0x7b, 0x31, 0x5e, 0x14, 0x50, 0x39, 0xae, 0x03, 0x32, 0x81, 0xa3, 0xbc, 0x67, 0xc8,
	0x59, 0x4c, 0xac, 0xb0, 0xbb, 0xa1, 0x97, 0x03, 0x59, 0x92, 0xcf, 0x00, 0x3b, 0x9f, 0x90, 0xa4,
	0x56, 0xc9, 0x5e, 0xc6, 0x69, 0x11, 0xce, 0x6b, 0xc8, 0x7b, 0x40, 0x68, 0xa8, 0x30, 0x8f, 0xd0,
	0x50, 0x69, 0x97, 0x03, 0xf2, 0x00, 0x9d, 0xa2, 0x2b, 0xc8, 0xf9, 0x8e, 0x5f, 0xb2, 0x91, 0xf1,
	0xaa, 0x3a, 0x98, 0x25, 0xfc, 0x04, 0x8d, 0xd4, 0x04, 0xa4, 0x27, 0xc7, 0x97, 0x37, 0x96, 0xa1,
	0xed, 0x83, 0xd9, 0xc1, 0x6b, 0xa8, 0xc7, 0xf7, 0x48, 0xda, 0x71, 0x3c, 0xe7, 0x11, 0xa3, 0xb3,
	0x03, 0x52, 0xf2, 0xd7, 0x0f, 0xbf, 0x6f, 0x16, 0x94, 0x2f, 0xd7, 0xf6, 0xd0, 0x09, 0x56, 0xa3,
	0x10, 0x5d, 0xea, 0x06, 0xa1, 0xb5, 0x08, 0x46, 0x3c, 0xb2, 0xa8, 0x4f, 0xfd, 0x05, 0xdb, 0x38,
	0xef, 0xe4, 0x9b, 0x1a, 0x25, 0xff, 0x21, 0x1b, 0x85, 0xb6, 0xfd, 0x2c, 0x59, 0xde, 0xfc, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xb2, 0x1f, 0x12, 0x7e, 0x40, 0x05, 0x00, 0x00,
}
